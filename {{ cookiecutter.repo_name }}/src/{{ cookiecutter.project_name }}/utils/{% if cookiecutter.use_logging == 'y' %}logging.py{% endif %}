import logging
import sys
from logging.handlers import RotatingFileHandler
from pathlib import Path
from datetime import datetime

# Create logs directory
LOG_DIR = Path(__file__).resolve().parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

script_name = Path(sys.argv[0]).stem or "script"
timestamp = datetime.now().strftime(r"%y-%m-%d_%H-%M")
LOG_FILE = LOG_DIR / f"{script_name}_{timestamp}.log"

# --- Console handler (looks exactly like print) ---
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter("%(message)s")
console_handler.setFormatter(console_formatter)

# --- File handler (detailed logging) ---
file_handler = RotatingFileHandler(LOG_FILE, maxBytes=5_000_000, backupCount=5)
file_handler.setLevel(logging.DEBUG)
file_formatter = logging.Formatter(
    "%(asctime)s | %(levelname)-8s | %(name)s | %(filename)s:%(lineno)d | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
file_handler.setFormatter(file_formatter)

# --- Root logger setup ---
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# Optional: silence noisy libs
logging.getLogger("urllib3").setLevel(logging.WARNING)

def get_logger(name: str = None):
    """Get a logger for a specific module."""
    return logging.getLogger(name)
